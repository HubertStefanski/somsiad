# Copyright 2018-2020 Twixes

# This file is part of Somsiad - the Polish Discord bot.

# Somsiad is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

# Somsiad is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with Somsiad.
# If not, see <https://www.gnu.org/licenses/>.

import io
import discord
from discord.ext import commands
from core import ServerSpecific, ChannelRelated, Help, cooldown
from utilities import first_url, word_number_form
import data

channel_being_processed_for_servers = {}


class PinArchive(data.Base, ServerSpecific, ChannelRelated):
    async def archive(self, bot: commands.Bot, channel: discord.TextChannel) -> int:
        """Archives the provided message."""
        archive_channel = self.discord_channel
        messages = await channel.pins()
        if not messages:
            raise ValueError
        channel_being_processed_for_servers[channel.guild.id] = channel
        for message in reversed(messages):
            await self._archive_message(bot, archive_channel, message)
        return len(messages)

    async def _archive_message(self, bot: commands.Bot, archive_channel: discord.TextChannel, message: discord.Message):
        pin_embed = bot.generate_embed(description=message.content, timestamp=message.created_at)
        pin_embed.set_author(name=message.author.display_name, url=message.jump_url, icon_url=message.author.avatar_url)
        pin_embed.set_footer(text=f'#{message.channel}')
        files = []
        for attachment in message.attachments:
            filename = attachment.filename
            fp = io.BytesIO()
            await attachment.save(fp)
            file = discord.File(fp, filename)
            files.append(file)
        if len(files) == 1:
            if message.attachments[0].height is not None:
                pin_embed.set_image(url=f'attachment://{message.attachments[0].filename}')
            await archive_channel.send(embed=pin_embed, file=files[0])
        elif len(files) > 1:
            await archive_channel.send(embed=pin_embed, files=files)
        else:
            url_from_content = first_url(message.content)
            if url_from_content is not None:
                pin_embed.set_image(url=url_from_content)
            await archive_channel.send(embed=pin_embed)


class Pins(commands.Cog):
    GROUP = Help.Command(
        ('przypiƒôte', 'przypinki', 'piny'), (), 'Komendy zwiƒÖzane z archiwizacjƒÖ przypiƒôtych wiadomo≈õci.'
    )
    COMMANDS = (
        Help.Command(
            ('kana≈Ç', 'kanal'), '?kana≈Ç',
            'Je≈õli podano <?kana≈Ç>, ustawia go jako serwerowy kana≈Ç archiwum przypiƒôtych wiadomo≈õci. '
            'W przeciwnym razie pokazuje jaki kana≈Ç obecnie jest archiwum przypiƒôtych wiadomo≈õci.'
        ),
        Help.Command(
            ('archiwizuj', 'zarchiwizuj'), (),
            'Archiwizuje wiadomo≈õci przypiƒôte na kanale na kt√≥rym u≈ºyto komendy przez zapisanie ich na kanale archiwum.'
        ),
        Help.Command(
            ('wyczy≈õƒá', 'wyczysc'), (), 'Odpina wszystkie wiadomo≈õci na kanale.'
        )
    )
    HELP = Help(COMMANDS, 'üìå', group=GROUP)

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.group(aliases=['przypiƒôte', 'przypinki', 'piny'], invoke_without_command=True, case_insensitive=True)
    @cooldown()
    async def pins(self, ctx):
        """A group of pin-related commands."""
        await self.bot.send(ctx, embeds=self.HELP.embeds)

    @pins.command(aliases=['kana≈Ç', 'kanal'])
    @cooldown()
    @commands.guild_only()
    @commands.has_permissions(manage_channels=True)
    async def pins_channel(self, ctx, channel: discord.TextChannel = None):
        """Sets the pin archive channel of the server."""
        session = data.Session()
        pin_archive = session.query(PinArchive).get(ctx.guild.id)
        if channel is not None:
            if pin_archive:
                pin_archive.channel_id = channel.id
            else:
                pin_archive = PinArchive(server_id=ctx.guild.id, channel_id=channel.id)
                session.add(pin_archive)
            session.commit()
            session.close()
            embed = self.bot.generate_embed('‚úÖ', f'Ustawiono #{channel} jako kana≈Ç archiwum przypiƒôtych wiadomo≈õci')
        else:
            if pin_archive is not None and pin_archive.channel_id is not None:
                notice = f'Kana≈Çem archiwum przypiƒôtych wiadomo≈õci jest #{pin_archive.discord_channel}'
            else:
                notice = 'Nie ustawiono na serwerze kana≈Çu archiwum przypiƒôtych wiadomo≈õci'
            embed = self.bot.generate_embed('üóÉÔ∏è', notice)
        await self.bot.send(ctx, embed=embed)

    @pins_channel.error
    async def pins_channel_error(self, ctx, error):
        notice = None
        if isinstance(error, commands.BadArgument):
            notice = 'Nie znaleziono podanego kana≈Çu na serwerze'
        elif isinstance(error, commands.MissingPermissions):
            notice = (
                'Do sprawdzenia lub zmiany kana≈Çu archiwum przypiƒôtych wiadomo≈õci potrzebne sƒÖ '
                'uprawnienia do zarzƒÖdzania kana≈Çami'
            )
        if notice is not None:
            embed = self.bot.generate_embed('‚ö†Ô∏è', notice)
            await self.bot.send(ctx, embed=embed)

    @pins.command(aliases=['archiwizuj', 'zarchiwizuj'])
    @cooldown()
    @commands.guild_only()
    @commands.has_permissions(manage_messages=True)
    async def pins_archive(self, ctx):
        """Archives pins in the channel where the command was invoked."""
        async with ctx.typing():
            with data.session() as session:
                pin_archive = session.query(PinArchive).get(ctx.guild.id)
                if pin_archive is None or pin_archive.channel_id is None:
                    emoji, notice = '‚ö†Ô∏è', 'Nie ustawiono na serwerze kana≈Çu archiwum przypiƒôtych wiadomo≈õci'
                elif pin_archive.discord_channel is None:
                    emoji, notice = '‚ö†Ô∏è', 'Ustawiony kana≈Ç archiwum przypiƒôtych wiadomo≈õci ju≈º nie istnieje'
                elif channel_being_processed_for_servers.get(ctx.guild.id) is not None:
                    emoji, notice = (
                        'üî¥', 'Na serwerze w≈Ça≈õnie trwa przetwarzanie kana≈Çu '
                        f'#{channel_being_processed_for_servers[ctx.guild.id]}'
                    )
                else:
                    channel_being_processed_for_servers[ctx.guild.id] = pin_archive.discord_channel
                    try:
                        try:
                            async with pin_archive.discord_channel.typing():
                                archived = await pin_archive.archive(self.bot, ctx.channel)
                        except ValueError:
                            emoji, notice = 'üî¥', 'Brak przypiƒôtych wiadomo≈õci do zarchiwizowania'
                        else:
                            forms = ('przypiƒôtƒÖ wiadomo≈õƒá', 'przypiƒôte wiadomo≈õci', 'przypiƒôtych wiadomo≈õci')
                            emoji, notice = '‚úÖ', f'Zarchiwizowano {word_number_form(archived, *forms)}'
                    except:
                        raise
                    finally:
                        channel_being_processed_for_servers[ctx.guild.id] = None
            embed = self.bot.generate_embed(emoji, notice)
            await self.bot.send(ctx, embed=embed)

    @pins.command(aliases=['wyczy≈õƒá', 'wyczysc'])
    @cooldown()
    @commands.guild_only()
    @commands.has_permissions(manage_messages=True)
    async def pins_clear(self, ctx):
        """Unpins all pins in the channel."""
        async with ctx.typing():
            messages = await ctx.channel.pins()
            if not messages:
                emoji, notice = 'üî¥', 'Brak przypiƒôtych wiadomo≈õci do odpiƒôcia'
            elif channel_being_processed_for_servers.get(ctx.guild.id) == ctx.channel:
                emoji, notice = 'üî¥', 'Ten kana≈Ç jest w≈Ça≈õnie przetwarzany'
            else:
                channel_being_processed_for_servers[ctx.guild.id] = ctx.channel
                try:
                    for pin in messages:
                        await pin.unpin()
                except:
                    raise
                else:
                    forms = ('przypiƒôtƒÖ wiadomo≈õƒá', 'przypiƒôte wiadomo≈õci', 'przypiƒôtych wiadomo≈õci')
                    emoji, notice = '‚úÖ', f'Odpiƒôto {word_number_form(len(messages), *forms)}'
                finally:
                    channel_being_processed_for_servers[ctx.guild.id] = None
            embed = self.bot.generate_embed(emoji, notice)
            await self.bot.send(ctx, embed=embed)


def setup(bot: commands.Bot):
    bot.add_cog(Pins(bot))
